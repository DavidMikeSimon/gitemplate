#!/usr/bin/env node
/**
 * Git cloning with template variables.
 *
 * Licensed under MIT.
 * Copyright (c) 2013 David Smith <https://github.com/codeactual/>
 */

var util = require('util');
var cli = require('commander');
var Gitemplate = require(__dirname + '/../dist/gitemplate').Gitemplate;

cli
  .option('-n, --name <new component>', '', String)
  .option('-s, --src <source repo>', '', String)
  .option('-d, --dst <destination dir>', '', String)
  .option('-r, --repo <user/project>', '', String)
  .option('-j, --json <custom macro JSON>', '', String)
  .parse(process.argv);

var gt = new Gitemplate();
gt
  .set('name', cli.name)
  .set('src', cli.src)
  .set('dst', cli.dst)
  .set('json', JSON.parse(cli.json || '{}'))
  .set('repo', cli.repo)
  .set('nativeRequire', require)
  .init();

function abort(msg, code) {
  util.error(msg);
  process.exit(typeof code === 'undefined' ? 1 : code);
}

function abortOnErrorResult(res) {
  if (res.code !== 0) { abort(res.output, res.code); }
}

var requiredParams = ['name', 'src', 'dst'];
requiredParams.forEach(function(param) {
  if (!cli[param]) { abort('--' + param + ' required'); }
});

abortOnErrorResult(gt.cloneRepo());
gt.rmGitDir();
abortOnErrorResult(gt.replaceContentVars());
gt.replaceNameVars();

if (cli.repo) {
  abortOnErrorResult(gt.initRepo());
  abortOnErrorResult(gt.setGithubOrigin());
}
